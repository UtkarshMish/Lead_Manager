{"version":3,"sources":["components/getData.js","components/login/login.jsx","components/details.jsx","components/utils/header.jsx","components/leadDetails.jsx","components/utils/leadsForm.jsx","components/home/home.jsx","App.js","serviceWorker.js","index.js"],"names":["jwt","getLeads","axios","get","searchLeads","id","a","parseInt","response","data","find","lead","isAuthorized","username","password","post","auth","localStorage","setItem","token","console","log","isSubmitted","name","email","address","mobile","area","enquiry_date","Date","toString","success","getCurrentUser","getItem","jwtDecode","defaults","headers","common","Login","state","userInput","error","handleSubmit","e","preventDefault","setState","handleChange","input","currentTarget","account","value","this","to","Fragment","className","onSubmit","htmlFor","onChange","type","required","Component","Details","leadData","loaded","restid","props","match","params","leads","not_found","disabled","Header","menuOpen","handleStateChange","isOpen","closeMenu","toggleMenu","width","onStateChange","pageWrapId","outerContainerId","noOverlay","disableOverlayClick","customBurgerIcon","aria-hidden","onClick","removeItem","Leads","leadDetails","isLoading","sortBy","handleSort","sort","b","toLowerCase","changeValue","DetailedValue","leadSelector","Math","floor","length","selected","border","map","key","_id","LeadForm","submitted","placeholder","min","max","Home","exact","path","component","App","user","ex","from","React","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3d4919c.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport jwtDecode from \"jwt-decode\";\r\nexport const getLeads = () => axios.get(\"/api/leaddetails\");\r\n//data handling methods\r\nexport const searchLeads = async id => {\r\n  id = parseInt(id);\r\n  const response = await getLeads();\r\n  // eslint-disable-next-line eqeqeq\r\n  return response.data.find(lead => lead[\"id\"] === id);\r\n};\r\nexport const setJwt = jwt => {\r\n  axios.defaults.headers.common[\"x-auth-token\"] = jwt;\r\n};\r\nexport const isAuthorized = async (username, password) => {\r\n  try {\r\n    const data = await axios.post(\"/api/auth\", {\r\n      username,\r\n      password\r\n    });\r\n    if (data.data.auth === true) {\r\n      localStorage.setItem(\"token\", data.data.token);\r\n      return true;\r\n    } else return false;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\n//Save Lead Data\r\nexport const isSubmitted = async ({ name, email, address, mobile, area }) => {\r\n  try {\r\n    let enquiry_date = Date().toString();\r\n\r\n    const data = await axios.post(\"/api/newlead\", {\r\n      name,\r\n      mobile,\r\n      email,\r\n      address,\r\n      area,\r\n      enquiry_date\r\n    });\r\n    if (data.data.success === true) {\r\n      return true;\r\n    } else return false;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\n//JWT helper methods\r\n\r\nexport function loginWithJwt(jwt) {\r\n  localStorage.setItem(\"token\", jwt);\r\n}\r\nexport function logout() {\r\n  localStorage.removeItem(\"token\");\r\n}\r\nexport function getJwt() {\r\n  return localStorage.getItem(\"token\");\r\n}\r\nexport function getCurrentUser() {\r\n  const jwt = localStorage.getItem(\"token\");\r\n  if (!jwt) {\r\n    return null;\r\n  }\r\n  return jwtDecode(jwt);\r\n}\r\nsetJwt(getJwt());\r\n","import React, { Component } from \"react\";\r\nimport \"./login.css\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { isAuthorized, getCurrentUser } from \"../getData\";\r\nclass Login extends Component {\r\n  state = {\r\n    userInput: { username: \"\", password: \"\" },\r\n    auth: false,\r\n    error: null\r\n  };\r\n  handleSubmit = async e => {\r\n    e.preventDefault();\r\n    let { userInput } = this.state;\r\n    let username = userInput.username;\r\n    let password = userInput.password;\r\n    let auth = false;\r\n\r\n    auth = await isAuthorized(username, password);\r\n    if (auth === true) {\r\n      this.setState({ auth });\r\n    } else {\r\n      const error = \"Username or Password didn't match !\";\r\n      this.setState({ error });\r\n    }\r\n  };\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    const account = { ...this.state.userInput };\r\n\r\n    account[input.name] = input.value;\r\n\r\n    this.setState({ userInput: account });\r\n  };\r\n\r\n  render() {\r\n    let { userInput, error, auth } = this.state;\r\n    if (auth === true || getCurrentUser()) {\r\n      return <Redirect to=\"/home/leads\" />;\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"card-container\">\r\n          <form onSubmit={this.handleSubmit}>\r\n            <div className=\"row\">\r\n              <label htmlFor=\"username\">\r\n                User Name:\r\n                <input\r\n                  onChange={this.handleChange}\r\n                  value={userInput.username}\r\n                  type=\"text\"\r\n                  name=\"username\"\r\n                  required\r\n                />\r\n              </label>\r\n            </div>\r\n            <div className=\"row\">\r\n              <label htmlFor=\"password\">\r\n                Password:\r\n                <input\r\n                  onChange={this.handleChange}\r\n                  value={userInput.password}\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  required\r\n                />\r\n              </label>\r\n              {error && (\r\n                <div className=\"alert-danger\">\r\n                  <h5>{error}</h5>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <button type=\"submit\" className=\"login-button\">\r\n              Login\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default Login;\r\n","import React, { Component } from \"react\";\r\nimport { searchLeads } from \"./getData\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nclass Details extends Component {\r\n  state = {\r\n    leadData: {},\r\n    loaded: false\r\n  };\r\n  async componentDidMount() {\r\n    const restid = this.props.match.params.id;\r\n    const leads = await searchLeads(restid);\r\n    if (leads)\r\n      this.setState({\r\n        leadData: leads,\r\n        loaded: true\r\n      });\r\n    else {\r\n      this.setState({ leadData: { not_found: true } });\r\n    }\r\n  }\r\n  render() {\r\n    let { leadData, loaded } = this.state;\r\n    if (leadData.not_found) return <Redirect to=\"/home/leads\" />;\r\n    if (loaded !== true) return null;\r\n    return (\r\n      <div className=\"page-wrap\">\r\n        <h1 className=\"main-heading\">Lead Information</h1>\r\n        <div className=\"form__details\">\r\n          <form className=\"form-group\">\r\n            <div className=\"row\">\r\n              <div className=\"col-1-of-3\">\r\n                <label htmlFor=\"name\">Name: </label>\r\n                <input\r\n                  required\r\n                  type=\"text\"\r\n                  value={leadData.name}\r\n                  disabled\r\n                  name=\"name\"\r\n                />\r\n              </div>\r\n              <div className=\"col-1-of-3\">\r\n                <label htmlFor=\"address\">Address: </label>\r\n                <textarea\r\n                  required\r\n                  type=\"text\"\r\n                  disabled\r\n                  value={leadData.address}\r\n                  name=\"address\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-1-of-3\">\r\n                <label htmlFor=\"mobile\">Mobile: </label>\r\n                <input\r\n                  required\r\n                  type=\"number\"\r\n                  disabled\r\n                  value={leadData[\"mobile\"]}\r\n                  name=\"mobile\"\r\n                />\r\n              </div>\r\n              <div className=\"col-1-of-3\">\r\n                <label htmlFor=\"area\">Area: </label>\r\n                <input\r\n                  required\r\n                  type=\"text\"\r\n                  disabled\r\n                  value={leadData[\"area\"]}\r\n                  name=\"area\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-1-of-3\">\r\n                <label htmlFor=\"email\">Email: </label>\r\n                <input\r\n                  required\r\n                  type=\"email\"\r\n                  disabled\r\n                  value={leadData[\"email\"]}\r\n                  name=\"email\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Details;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { pushRotate as Menu } from \"react-burger-menu\";\r\nimport { logout } from \"../getData\";\r\nclass Header extends Component {\r\n  state = {\r\n    menuOpen: false\r\n  };\r\n  handleStateChange = state => {\r\n    this.setState({ menuOpen: state.isOpen });\r\n  };\r\n  closeMenu = () => {\r\n    this.setState({ menuOpen: false });\r\n  };\r\n  toggleMenu = () => {\r\n    this.setState(state => ({ menuOpen: !state.menuOpen }));\r\n  };\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <nav className=\"navbar\">\r\n          <div className=\"menu\">\r\n            <Menu\r\n              width={\"15rem\"}\r\n              isOpen={this.state.menuOpen}\r\n              onStateChange={state => this.handleStateChange(state)}\r\n              pageWrapId={\"page-wrap\"}\r\n              outerContainerId={\"outer-container\"}\r\n              noOverlay={true}\r\n              disableOverlayClick={true}\r\n              customBurgerIcon={false}\r\n            >\r\n              <h4 className=\"heading-logo\">DrinkPrime</h4>\r\n              <div className=\"menu-items\">\r\n                <div className=\"menu-main-item\">\r\n                  $ Sales\r\n                  <i\r\n                    className=\"fa fa-angle-down menu-main-item \"\r\n                    aria-hidden=\"true\"\r\n                  ></i>\r\n                </div>\r\n                <Link\r\n                  onClick={this.closeMenu}\r\n                  id=\"home\"\r\n                  className=\"menu-item\"\r\n                  to=\"/home/leads\"\r\n                >\r\n                  <i\r\n                    className=\"fa fa-dot-circle-o icon-big-white\"\r\n                    aria-hidden=\"true\"\r\n                  ></i>\r\n                  New Lead\r\n                </Link>\r\n                <Link\r\n                  onClick={this.closeMenu}\r\n                  className=\"menu-item\"\r\n                  to=\"/home/newlead\"\r\n                >\r\n                  <i\r\n                    className=\"fa fa-dot-circle-o icon-big-white\"\r\n                    aria-hidden=\"true\"\r\n                  ></i>\r\n                  Create new lead\r\n                </Link>\r\n              </div>\r\n            </Menu>\r\n            <button onClick={this.toggleMenu} className=\"btn-menu\">\r\n              <i className=\"fa fa-bars icon-big-white\" aria-hidden=\"true\"></i>\r\n            </button>\r\n          </div>\r\n          <Link to=\"/\" className=\"menu-logout\" onClick={e => logout()}>\r\n            Log Out\r\n          </Link>\r\n        </nav>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nclass Leads extends Component {\r\n  state = {\r\n    leadDetails: [],\r\n    isLoading: true,\r\n    sortBy: \"id\",\r\n    type: false\r\n  };\r\n  async componentDidMount() {\r\n    const leads = this.props.leadDetails;\r\n    if (leads)\r\n      this.setState({\r\n        leadDetails: leads,\r\n        isLoading: false\r\n      });\r\n  }\r\n  handleSort = (value, type) => {\r\n    let { leadDetails, sortBy } = this.state;\r\n    sortBy = value;\r\n    if (type === true) {\r\n      if (value !== \"id\")\r\n        leadDetails = leadDetails.sort((a, b) =>\r\n          a[value].toLowerCase() > b[value].toLowerCase() ? 1 : -1\r\n        );\r\n      else\r\n        leadDetails = leadDetails.sort((a, b) =>\r\n          a[value] > b[value] ? 1 : -1\r\n        );\r\n    } else {\r\n      if (value !== \"id\")\r\n        leadDetails = leadDetails.sort((a, b) =>\r\n          a[value].toLowerCase() < b[value].toLowerCase() ? 1 : -1\r\n        );\r\n      else\r\n        leadDetails = leadDetails.sort((a, b) =>\r\n          a[value] < b[value] ? 1 : -1\r\n        );\r\n    }\r\n    this.setState({ leadDetails, type: !type, sortBy });\r\n  };\r\n  changeValue = id => {\r\n    this.setState({ DetailedValue: id });\r\n  };\r\n  render() {\r\n    let { leadDetails, isLoading, type } = this.state;\r\n\r\n    if (isLoading === true) return null;\r\n    const leadSelector = Math.floor(leadDetails.length / 6);\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"lead__details \">\r\n          <h2>New Leads</h2>\r\n          <h4>\r\n            Show\r\n            <span>\r\n              <select selected=\"selected\" className=\"page-selector\">\r\n                <option>{leadSelector * 6}</option>\r\n              </select>\r\n            </span>\r\n            entries\r\n          </h4>\r\n          <table className=\"table\" border=\"border\">\r\n            <thead>\r\n              <tr>\r\n                <th\r\n                  className=\"sort-icon\"\r\n                  onClick={() => this.handleSort(\"id\", type)}\r\n                >\r\n                  Lead ID\r\n                  {this.state.sortBy === \"id\" ? (\r\n                    <i\r\n                      className={\r\n                        \" fa fa-sort-\" + (type === true ? \"desc\" : \"asc\")\r\n                      }\r\n                      aria-hidden=\"true\"\r\n                    ></i>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </th>\r\n                <th\r\n                  className=\"sort-icon\"\r\n                  onClick={() => this.handleSort(\"name\", type)}\r\n                >\r\n                  Name\r\n                  {this.state.sortBy === \"name\" ? (\r\n                    <i\r\n                      className={\r\n                        \" fa fa-sort-\" + (type === true ? \"desc\" : \"asc\")\r\n                      }\r\n                      aria-hidden=\"true\"\r\n                    ></i>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </th>\r\n                <th\r\n                  className=\"sort-icon\"\r\n                  onClick={() => this.handleSort(\"enquiry_date\", type)}\r\n                >\r\n                  EnquiryDate\r\n                  {this.state.sortBy === \"enquiry_date\" ? (\r\n                    <i\r\n                      className={\r\n                        \" fa fa-sort-\" + (type === true ? \"desc\" : \"asc\")\r\n                      }\r\n                      aria-hidden=\"true\"\r\n                    ></i>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </th>\r\n                <th>Mobile</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {leadDetails.map(leads => {\r\n                return (\r\n                  <tr\r\n                    key={leads._id}\r\n                    onClick={() => this.changeValue(leads.id)}\r\n                  >\r\n                    <td className=\"btn-details\">\r\n                      <Link\r\n                        className=\"btn-details-Link\"\r\n                        to={`/home/leads/${leads.id}`}\r\n                      >\r\n                        {leads.id}\r\n                      </Link>\r\n                    </td>\r\n\r\n                    <td>{leads.name}</td>\r\n                    <td>{leads.enquiry_date}</td>\r\n                    <td>{leads.mobile}</td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default Leads;\r\n","import React, { Component } from \"react\";\r\nimport { isSubmitted } from \"../getData\";\r\nimport { Redirect } from \"react-router-dom\";\r\nclass LeadForm extends Component {\r\n  state = {\r\n    leadData: {\r\n      name: \"\",\r\n      mobile: \"\",\r\n      email: \"\",\r\n      address: \"\",\r\n      area: \"\"\r\n    },\r\n    submitted: false\r\n  };\r\n  handleSubmit = async e => {\r\n    e.preventDefault();\r\n    let { leadData } = this.state;\r\n    let submitted = false;\r\n\r\n    submitted = await isSubmitted(leadData);\r\n    console.log(submitted);\r\n    if (submitted === true) {\r\n      this.setState({ submitted });\r\n    }\r\n  };\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    const account = { ...this.state.leadData };\r\n\r\n    account[input.name] = input.value;\r\n\r\n    this.setState({ leadData: account });\r\n  };\r\n\r\n  render() {\r\n    let { leadData, submitted } = this.state;\r\n    if (submitted === true) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n    return (\r\n      <div className=\"page-wrap\">\r\n        <h1 className=\"main-heading\">Lead Information</h1>\r\n        <div className=\"form__details\">\r\n          <form className=\"form-group\" onSubmit={this.handleSubmit}>\r\n            <div className=\"row\">\r\n              <div className=\"col-1-of-3\">\r\n                <label htmlFor=\"name\">Name: </label>\r\n                <input\r\n                  required\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  onChange={this.handleChange}\r\n                  name=\"name\"\r\n                  placeholder=\"Enter Name:\"\r\n                />\r\n              </div>\r\n              <div className=\"col-1-of-3\">\r\n                <label htmlFor=\"address\">Address: </label>\r\n                <textarea\r\n                  required\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  onChange={this.handleChange}\r\n                  value={leadData.address}\r\n                  name=\"address\"\r\n                  placeholder=\"Enter Address:\"\r\n                />\r\n              </div>\r\n              <div className=\"col-1-of-3\">\r\n                <button type=\"submit\" className=\"btn-submit\">\r\n                  Create Lead\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-1-of-3\">\r\n                <label htmlFor=\"mobile\">Mobile: </label>\r\n                <input\r\n                  min=\"0000000001\"\r\n                  max=\"9999999999\"\r\n                  required\r\n                  type=\"number\"\r\n                  className=\"form-control\"\r\n                  onChange={this.handleChange}\r\n                  value={leadData[\"mobile\"]}\r\n                  name=\"mobile\"\r\n                  placeholder=\"Enter Mobile:\"\r\n                />\r\n              </div>\r\n              <div className=\"col-1-of-3\">\r\n                <label htmlFor=\"area\">Area: </label>\r\n                <input\r\n                  required\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  onChange={this.handleChange}\r\n                  value={leadData[\"area\"]}\r\n                  name=\"area\"\r\n                  placeholder=\"Enter Area:\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-1-of-3\">\r\n                <label htmlFor=\"email\">Email: </label>\r\n                <input\r\n                  required\r\n                  type=\"email\"\r\n                  className=\"form-control\"\r\n                  onChange={this.handleChange}\r\n                  value={leadData[\"email\"]}\r\n                  name=\"email\"\r\n                  placeholder=\"Enter Email:\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LeadForm;\r\n","import React, { Component } from \"react\";\r\nimport Details from \"../details\";\r\nimport \"./home.css\";\r\nimport Header from \"../utils/header\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Leads from \"../leadDetails\";\r\nimport LeadForm from \"../utils/leadsForm\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { getLeads, getCurrentUser } from \"../getData\";\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    leadDetails: []\r\n  };\r\n  async componentDidMount() {\r\n    const response = await getLeads();\r\n    this.setState({\r\n      leadDetails: response.data\r\n    });\r\n  }\r\n  render() {\r\n    if (!getCurrentUser()) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n    return (\r\n      <Switch>\r\n        <React.Fragment>\r\n          <div id=\"outer-container\">\r\n            <div className=\"header-container\">\r\n              <Header />\r\n            </div>\r\n            <div id=\"page-wrap\">\r\n              <Route exact path=\"/home/newlead\" component={LeadForm} />\r\n              <Route exact path=\"/home/leads/:id\" component={Details} />\r\n              <Route\r\n                exact\r\n                path=\"/home/leads/\"\r\n                component={e => <Leads leadDetails={this.state.leadDetails} />}\r\n              />\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n      </Switch>\r\n    );\r\n  }\r\n}\r\nexport default Home;\r\n","import React from \"react\";\nimport Login from \"./components/login/login\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport Home from \"./components/home/home\";\nimport { getCurrentUser } from \"./components/getData\";\nclass App extends React.Component {\n  componentDidMount() {\n    try {\n      const user = getCurrentUser();\n      this.setState({ user });\n    } catch (ex) {}\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Switch>\n          <Route path=\"/\" component={Login} className=\"item\" exact />\n          <Route path=\"/home\" component={Home} className=\"item\" />\n          <Redirect from=\"/home\" to=\"/home/leads\" exact />;\n        </Switch>\n      </React.Fragment>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}